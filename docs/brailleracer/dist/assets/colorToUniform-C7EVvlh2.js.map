{"version":3,"file":"colorToUniform-C7EVvlh2.js","sources":["../../node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","../../node_modules/pixi.js/lib/filters/Filter.mjs","../../node_modules/pixi.js/lib/rendering/high-shader/shader-bits/localUniformBit.mjs","../../node_modules/pixi.js/lib/scene/sprite/BatchableSprite.mjs","../../node_modules/pixi.js/lib/scene/graphics/gpu/colorToUniform.mjs"],"sourcesContent":["\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader.mjs';\nimport { State } from '../rendering/renderers/shared/state/State.mjs';\n\n\"use strict\";\nconst _Filter = class _Filter extends Shader {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     */\n    this._state = State.for2d();\n    this.blendMode = options.blendMode;\n    this.padding = options.padding;\n    if (typeof options.antialias === \"boolean\") {\n      this.antialias = options.antialias ? \"on\" : \"off\";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.clipToViewport = options.clipToViewport;\n    this.addResource(\"uTexture\", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default \"normal\"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/** The default filter settings */\n_Filter.defaultOptions = {\n  blendMode: \"normal\",\n  resolution: 1,\n  padding: 0,\n  antialias: \"off\",\n  blendRequired: false,\n  clipToViewport: true\n};\nlet Filter = _Filter;\n\nexport { Filter };\n//# sourceMappingURL=Filter.mjs.map\n","\"use strict\";\nconst localUniformBit = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* wgsl */\n      `\n\n            struct LocalUniforms {\n                uTransformMatrix:mat3x3<f32>,\n                uColor:vec4<f32>,\n                uRound:f32,\n            }\n\n            @group(1) @binding(0) var<uniform> localUniforms : LocalUniforms;\n        `\n    ),\n    main: (\n      /* wgsl */\n      `\n            vColor *= localUniforms.uColor;\n            modelMatrix *= localUniforms.uTransformMatrix;\n        `\n    ),\n    end: (\n      /* wgsl */\n      `\n            if(localUniforms.uRound == 1)\n            {\n                vPosition = vec4(roundPixels(vPosition.xy, globalUniforms.uResolution), vPosition.zw);\n            }\n        `\n    )\n  }\n};\nconst localUniformBitGroup2 = {\n  ...localUniformBit,\n  vertex: {\n    ...localUniformBit.vertex,\n    // replace the group!\n    header: localUniformBit.vertex.header.replace(\"group(1)\", \"group(2)\")\n  }\n};\nconst localUniformBitGl = {\n  name: \"local-uniform-bit\",\n  vertex: {\n    header: (\n      /* glsl */\n      `\n\n            uniform mat3 uTransformMatrix;\n            uniform vec4 uColor;\n            uniform float uRound;\n        `\n    ),\n    main: (\n      /* glsl */\n      `\n            vColor *= uColor;\n            modelMatrix = uTransformMatrix;\n        `\n    ),\n    end: (\n      /* glsl */\n      `\n            if(uRound == 1.)\n            {\n                gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\n            }\n        `\n    )\n  }\n};\n\nexport { localUniformBit, localUniformBitGl, localUniformBitGroup2 };\n//# sourceMappingURL=localUniformBit.mjs.map\n","\"use strict\";\nclass BatchableSprite {\n  constructor() {\n    this.batcherName = \"default\";\n    this.topology = \"triangle-list\";\n    // batch specific..\n    this.attributeSize = 4;\n    this.indexSize = 6;\n    this.packAsQuad = true;\n    this.roundPixels = 0;\n    this._attributeStart = 0;\n    // location in the buffer\n    this._batcher = null;\n    this._batch = null;\n  }\n  get blendMode() {\n    return this.renderable.groupBlendMode;\n  }\n  get color() {\n    return this.renderable.groupColorAlpha;\n  }\n  reset() {\n    this.renderable = null;\n    this.texture = null;\n    this._batcher = null;\n    this._batch = null;\n    this.bounds = null;\n  }\n  destroy() {\n  }\n}\n\nexport { BatchableSprite };\n//# sourceMappingURL=BatchableSprite.mjs.map\n","\"use strict\";\nfunction colorToUniform(rgb, alpha, out, offset) {\n  out[offset++] = (rgb >> 16 & 255) / 255;\n  out[offset++] = (rgb >> 8 & 255) / 255;\n  out[offset++] = (rgb & 255) / 255;\n  out[offset++] = alpha;\n}\nfunction color32BitToUniform(abgr, out, offset) {\n  const alpha = (abgr >> 24 & 255) / 255;\n  out[offset++] = (abgr & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 8 & 255) / 255 * alpha;\n  out[offset++] = (abgr >> 16 & 255) / 255 * alpha;\n  out[offset++] = alpha;\n}\n\nexport { color32BitToUniform, colorToUniform };\n//# sourceMappingURL=colorToUniform.mjs.map\n"],"names":["blendModeIds","BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","DEPTH_MASK","_State","value","state","State","_Filter","Shader","options","filterManager","input","output","clearMode","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter","localUniformBit","localUniformBitGroup2","localUniformBitGl","BatchableSprite","color32BitToUniform","abgr","out","offset","alpha"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}