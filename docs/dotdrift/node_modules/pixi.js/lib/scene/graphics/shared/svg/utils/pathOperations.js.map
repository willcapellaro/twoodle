{"version":3,"file":"pathOperations.js","sources":["../../../../../../src/scene/graphics/shared/svg/utils/pathOperations.ts"],"sourcesContent":["import { GraphicsPath } from '../../path/GraphicsPath';\n\n/**\n * Extracts individual subpaths from SVG path data by splitting on Move commands.\n * @param pathData - The SVG path data string\n * @returns Array of subpath strings\n * @internal\n */\nexport function extractSubpaths(pathData: string): string[]\n{\n    // Split on Move commands (M or m) to get individual subpaths\n    const parts = pathData.split(/(?=[Mm])/);\n    const subpaths = parts.filter((part) => part.trim().length > 0);\n\n    return subpaths;\n}\n\n/**\n * Calculates the area of a path using bounding box estimation.\n * @param pathData - The SVG path data string\n * @returns The estimated area of the path\n * @internal\n */\nexport function calculatePathArea(pathData: string): number\n{\n    const coords = pathData.match(/[-+]?[0-9]*\\.?[0-9]+/g);\n\n    if (!coords || coords.length < 4) return 0;\n\n    const numbers = coords.map(Number);\n    const xs = [];\n    const ys = [];\n\n    for (let i = 0; i < numbers.length; i += 2)\n    {\n        if (i + 1 < numbers.length)\n        {\n            xs.push(numbers[i]);\n            ys.push(numbers[i + 1]);\n        }\n    }\n\n    if (xs.length === 0 || ys.length === 0) return 0;\n\n    const minX = Math.min(...xs);\n    const maxX = Math.max(...xs);\n    const minY = Math.min(...ys);\n    const maxY = Math.max(...ys);\n\n    const area = (maxX - minX) * (maxY - minY);\n\n    return area;\n}\n\n/**\n * Parses SVG path data and appends instructions to a GraphicsPath.\n * @param pathData - The SVG path data string\n * @param graphicsPath - The GraphicsPath to append instructions to\n * @internal\n */\nexport function appendSVGPath(pathData: string, graphicsPath: GraphicsPath): void\n{\n    const tempPath = new GraphicsPath(pathData, false);\n\n    for (const instruction of tempPath.instructions)\n    {\n        graphicsPath.instructions.push(instruction);\n    }\n}\n"],"names":["GraphicsPath"],"mappings":";;;;;AAQO,SAAS,gBAAgB,QAChC,EAAA;AAEI,EAAM,MAAA,KAAA,GAAQ,QAAS,CAAA,KAAA,CAAM,UAAU,CAAA,CAAA;AACvC,EAAM,MAAA,QAAA,GAAW,MAAM,MAAO,CAAA,CAAC,SAAS,IAAK,CAAA,IAAA,EAAO,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;AAE9D,EAAO,OAAA,QAAA,CAAA;AACX,CAAA;AAQO,SAAS,kBAAkB,QAClC,EAAA;AACI,EAAM,MAAA,MAAA,GAAS,QAAS,CAAA,KAAA,CAAM,uBAAuB,CAAA,CAAA;AAErD,EAAI,IAAA,CAAC,MAAU,IAAA,MAAA,CAAO,MAAS,GAAA,CAAA;AAAG,IAAO,OAAA,CAAA,CAAA;AAEzC,EAAM,MAAA,OAAA,GAAU,MAAO,CAAA,GAAA,CAAI,MAAM,CAAA,CAAA;AACjC,EAAA,MAAM,KAAK,EAAC,CAAA;AACZ,EAAA,MAAM,KAAK,EAAC,CAAA;AAEZ,EAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,OAAQ,CAAA,MAAA,EAAQ,KAAK,CACzC,EAAA;AACI,IAAI,IAAA,CAAA,GAAI,CAAI,GAAA,OAAA,CAAQ,MACpB,EAAA;AACI,MAAG,EAAA,CAAA,IAAA,CAAK,OAAQ,CAAA,CAAC,CAAC,CAAA,CAAA;AAClB,MAAA,EAAA,CAAG,IAAK,CAAA,OAAA,CAAQ,CAAI,GAAA,CAAC,CAAC,CAAA,CAAA;AAAA,KAC1B;AAAA,GACJ;AAEA,EAAA,IAAI,EAAG,CAAA,MAAA,KAAW,CAAK,IAAA,EAAA,CAAG,MAAW,KAAA,CAAA;AAAG,IAAO,OAAA,CAAA,CAAA;AAE/C,EAAA,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,GAAG,EAAE,CAAA,CAAA;AAC3B,EAAA,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,GAAG,EAAE,CAAA,CAAA;AAC3B,EAAA,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,GAAG,EAAE,CAAA,CAAA;AAC3B,EAAA,MAAM,IAAO,GAAA,IAAA,CAAK,GAAI,CAAA,GAAG,EAAE,CAAA,CAAA;AAE3B,EAAM,MAAA,IAAA,GAAA,CAAQ,IAAO,GAAA,IAAA,KAAS,IAAO,GAAA,IAAA,CAAA,CAAA;AAErC,EAAO,OAAA,IAAA,CAAA;AACX,CAAA;AAQgB,SAAA,aAAA,CAAc,UAAkB,YAChD,EAAA;AACI,EAAA,MAAM,QAAW,GAAA,IAAIA,yBAAa,CAAA,QAAA,EAAU,KAAK,CAAA,CAAA;AAEjD,EAAW,KAAA,MAAA,WAAA,IAAe,SAAS,YACnC,EAAA;AACI,IAAa,YAAA,CAAA,YAAA,CAAa,KAAK,WAAW,CAAA,CAAA;AAAA,GAC9C;AACJ;;;;;;"}