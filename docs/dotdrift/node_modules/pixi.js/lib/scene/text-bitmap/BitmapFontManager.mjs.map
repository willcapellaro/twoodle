{"version":3,"file":"BitmapFontManager.mjs","sources":["../../../src/scene/text-bitmap/BitmapFontManager.ts"],"sourcesContent":["import { lru } from 'tiny-lru';\nimport { Cache } from '../../assets/cache/Cache';\nimport { type TextureStyle, type TextureStyleOptions } from '../../rendering/renderers/shared/texture/TextureStyle';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation';\nimport { warn } from '../../utils/logging/warn';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { TextStyle } from '../text/TextStyle';\nimport { DynamicBitmapFont } from './DynamicBitmapFont';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\nimport { resolveCharacters } from './utils/resolveCharacters';\n\nimport type { TextStyleOptions } from '../text/TextStyle';\nimport type { BitmapFont } from './BitmapFont';\nimport type { BitmapTextLayoutData } from './utils/getBitmapTextLayout';\n\nlet fontCount = 0;\n\n/**\n * The options for installing a new BitmapFont. Once installed, the font will be available\n * for use in BitmapText objects through the fontFamily property of TextStyle.\n * @example\n * ```ts\n * import { BitmapFont, BitmapText } from 'pixi.js';\n *\n * // Basic font installation\n * BitmapFont.install({\n *     name: 'BasicFont',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 24,\n *         fill: '#ffffff'\n *     }\n * });\n *\n * // Advanced font installation\n * BitmapFont.install({\n *     name: 'AdvancedFont',\n *     style: {\n *         fontFamily: 'Arial',\n *         fontSize: 32,\n *         fill: '#ff0000',\n *         stroke: { color: '#000000', width: 2 }\n *     },\n *     // Include specific character ranges\n *     chars: [\n *         ['a', 'z'],           // lowercase letters\n *         ['A', 'Z'],           // uppercase letters\n *         ['0', '9'],           // numbers\n *         '!@#$%^&*()_+-=[]{}' // symbols\n *     ],\n *     resolution: 2,            // High-DPI support\n *     padding: 4,              // Glyph padding\n *     skipKerning: false,      // Enable kerning\n *     textureStyle: {\n *         scaleMode: 'linear',\n *     }\n * });\n *\n * // Using the installed font\n * const text = new BitmapText({\n *     text: 'Hello World',\n *     style: {\n *         fontFamily: 'AdvancedFont',\n *         fontSize: 48\n *     }\n * });\n * ```\n * @category text\n * @standard\n */\nexport interface BitmapFontInstallOptions\n{\n    /**\n     * The name of the font. This will be used as the fontFamily in text styles to access this font.\n     * Must be unique across all installed bitmap fonts.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'MyCustomFont',\n     *     style: { fontFamily: 'Arial' }\n     * });\n     * ```\n     */\n    name?: string;\n\n    /**\n     * Characters included in the font set. You can specify individual characters or ranges.\n     * Don't forget to include spaces ' ' in your character set!\n     * @default BitmapFont.ALPHANUMERIC\n     * @example\n     * ```ts\n     * // Different ways to specify characters\n     * BitmapFont.install({\n     *     name: 'RangeFont',\n     *     chars: [\n     *         ['a', 'z'],              // Range of characters\n     *         '0123456789',            // String of characters\n     *         [['0', '9'], ['A', 'Z']] // Multiple ranges\n     *     ]\n     * });\n     * ```\n     */\n    chars?: string | (string | string[])[];\n\n    /**\n     * Render resolution for glyphs. Higher values create sharper text at the cost of memory.\n     * Useful for supporting high-DPI displays.\n     * @default 1\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'HiDPIFont',\n     *     resolution: window.devicePixelRatio || 2\n     * });\n     * ```\n     */\n    resolution?: number;\n\n    /**\n     * Padding between glyphs on texture atlas. Balances visual quality with texture space.\n     * - Lower values: More compact, but may have visual artifacts\n     * - Higher values: Better quality, but uses more texture space\n     * @default 4\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'PaddedFont',\n     *     padding: 8 // More padding for better quality\n     * });\n     * ```\n     */\n    padding?: number;\n\n    /**\n     * Skip generation of kerning information for the BitmapFont.\n     * - true: Faster generation, but text may have inconsistent spacing\n     * - false: Better text appearance, but slower generation\n     * @default false\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'FastFont',\n     *     skipKerning: true // Prioritize performance\n     * });\n     * ```\n     */\n    skipKerning?: boolean;\n\n    /**\n     * Style options to render the BitmapFont with.\n     * Supports all TextStyle properties including fill, stroke, and shadow effects.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'StyledFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 32,\n     *         fill: 'white',\n     *         stroke: { color: '#000000', width: 2 },\n     *         dropShadow: {\n     *             color: '#000000',\n     *             blur: 2,\n     *             distance: 3\n     *         }\n     *     }\n     * });\n     * ```\n     */\n    style?: TextStyle | TextStyleOptions;\n\n    /**\n     * Optional texture style to use when creating the font textures.\n     * Controls how the font textures are rendered and filtered.\n     * @example\n     * ```ts\n     * BitmapFont.install({\n     *     name: 'CrispFont',\n     *     textureStyle: {\n     *         scaleMode: 'nearest',\n     *     }\n     * });\n     * ```\n     */\n    textureStyle?: TextureStyle | TextureStyleOptions;\n\n    /**\n     * Whether to allow overriding the fill color with a tint at runtime.\n     *\n     * When enabled, the font can be dynamically tinted using the `tint` property of BitmapText,\n     * allowing a single font to display multiple colors without creating separate font textures.\n     * This is memory efficient but requires the font to be rendered with white fill color.\n     *\n     * When disabled, the fill color is permanently baked into the font texture. This allows\n     * any fill color but prevents runtime tinting - each color variation requires a separate font.\n     * @default false (automatically determined based on style)\n     *\n     * **Requirements for tinting:**\n     * - Fill color must be white (`0xFFFFFF` or `'#ffffff'`)\n     * - No stroke effects\n     * - No drop shadows (or only black shadows)\n     * - No gradient or pattern fills\n     *\n     * **Performance considerations:**\n     * - ✅ Enabled: One font texture, multiple colors via tinting (memory efficient)\n     * - ❌ Disabled: Separate font texture per color (higher memory usage)\n     * @example\n     * ```ts\n     * // Correct usage - white fill with tinting enabled\n     * BitmapFont.install({\n     *     name: 'TintableFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFFFFFF  // Must be white for tinting\n     *     },\n     *     dynamicFill: true\n     * });\n     *\n     * // Use the font with different colors via tinting\n     * const redText = new BitmapText({\n     *     text: 'Red Text',\n     *     style: { fontFamily: 'TintableFont', fill: 'red }, // Red tint\n     * });\n     *\n     * const blueText = new BitmapText({\n     *     text: 'Blue Text',\n     *     style: { fontFamily: 'TintableFont', fill: 'blue' }, // Blue tint\n     * });\n     * ```\n     * @example\n     * ```ts\n     * // Incorrect usage - colored fill with tinting enabled\n     * BitmapFont.install({\n     *     name: 'BadTintFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFF0000  // ❌ Red fill won't tint properly\n     *     },\n     *     dynamicFill: true  // ❌ Will not work as expected\n     * });\n     * ```\n     * @example\n     * ```ts\n     * // Alternative - baked colors (no tinting)\n     * BitmapFont.install({\n     *     name: 'BakedColorFont',\n     *     style: {\n     *         fontFamily: 'Arial',\n     *         fontSize: 24,\n     *         fill: 0xFF0000,  // Any color works\n     *         stroke: { color: 0x000000, width: 2 }  // Strokes allowed\n     *     },\n     *     dynamicFill: false  // Color is baked in\n     * });\n     * ```\n     */\n    dynamicFill?: boolean;\n}\n\n/** @advanced */\nclass BitmapFontManagerClass\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.ALPHA })\n     */\n    public readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @type {string[][]}\n     * @example\n     * BitmapFont.from('ExampleFont', style, { chars: BitmapFont.NUMERIC })\n     */\n    public readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @type {string[][]}\n     */\n    public readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @type {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public readonly ASCII = [[' ', '~']];\n\n    /** Default options for installing a new BitmapFont. */\n    public defaultOptions: Omit<BitmapFontInstallOptions, 'style'> = {\n        chars: this.ALPHANUMERIC,\n        resolution: 1,\n        padding: 4,\n        skipKerning: false,\n        textureStyle: null,\n    };\n\n    /** Cache for measured text layouts to avoid recalculating them multiple times. */\n    public readonly measureCache = lru<BitmapTextLayoutData>(1000);\n\n    /**\n     * Get a font for the specified text and style.\n     * @param text - The text to get the font for\n     * @param style - The style to use\n     */\n    public getFont(text: string, style: TextStyle): BitmapFont\n    {\n        let fontFamilyKey = `${style.fontFamily as string}-bitmap`;\n        let overrideFill = true;\n\n        // assuming there is no texture we can use a tint!\n        if (style._fill.fill && !style._stroke)\n        {\n            fontFamilyKey += style._fill.fill.styleKey;\n            overrideFill = false;\n        }\n        else if (style._stroke || style.dropShadow)\n        {\n            // if there is a stoke, we need to use the style key as this the font generated cannot be tinted\n            // due to the fact the font has at least two colors.\n            fontFamilyKey = `${style.styleKey}-bitmap`;\n            overrideFill = false;\n        }\n\n        // first get us the the right font...\n        if (!Cache.has(fontFamilyKey))\n        {\n            const styleCopy = Object.create(style);\n\n            // Override the lineHeight, let the BitmapFont calculate the lineHeight\n            // from the fontMetrics instead using a custom lineHeight from BitmapText parameter\n            styleCopy.lineHeight = 0;\n\n            const fnt = new DynamicBitmapFont({\n                style: styleCopy,\n                overrideFill,\n                overrideSize: true,\n                ...this.defaultOptions,\n            });\n\n            fontCount++;\n\n            // warn users if they have created too many dynamic fonts\n            if (fontCount > 50)\n            {\n                // eslint-disable-next-line max-len\n                warn('BitmapText', `You have dynamically created ${fontCount} bitmap fonts, this can be inefficient. Try pre installing your font styles using \\`BitmapFont.install({name:\"style1\", style})\\``);\n            }\n\n            fnt.once('destroy', () =>\n            {\n                fontCount--;\n                Cache.remove(fontFamilyKey);\n            });\n\n            Cache.set(\n                fontFamilyKey as string,\n                fnt\n            );\n        }\n\n        const dynamicFont = Cache.get(fontFamilyKey);\n\n        (dynamicFont as DynamicBitmapFont).ensureCharacters?.(text);\n\n        return dynamicFont;\n    }\n\n    /**\n     * Get the layout of a text for the specified style.\n     * @param text - The text to get the layout for\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public getLayout(text: string, style: TextStyle, trimEnd: boolean = true): BitmapTextLayoutData\n    {\n        const bitmapFont = this.getFont(text, style);\n\n        const id = `${text}-${style.styleKey}-${trimEnd}`;\n\n        // Check if we have a cached layout\n        if (this.measureCache.has(id))\n        {\n            return this.measureCache.get(id);\n        }\n\n        const segments = CanvasTextMetrics.graphemeSegmenter(text);\n\n        // Generate the layout data\n        const layoutData = getBitmapTextLayout(segments, style, bitmapFont, trimEnd);\n\n        this.measureCache.set(id, layoutData);\n\n        return layoutData;\n    }\n\n    /**\n     * Measure the text using the specified style.\n     * @param text - The text to measure\n     * @param style - The style to use\n     * @param trimEnd - Whether to ignore whitespaces at the end of each line\n     */\n    public measureText(\n        text: string,\n        style: TextStyle,\n        trimEnd: boolean = true\n    ): { width: number; height: number; scale: number; offsetY: number }\n    {\n        return this.getLayout(text, style, trimEnd);\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set\n     * @param options - Setup options for font generation.\n     * @returns Font generated by style options.\n     * @example\n     * import { BitmapFontManager, BitmapText } from 'pixi.js';\n     *\n     * BitmapFontManager.install('TitleFont', {\n     *     fontFamily: 'Arial',\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: 'purple',\n     * });\n     *\n     * const title = new BitmapText({ text: 'This is the title', fontFamily: 'TitleFont' });\n     */\n    public install(options: BitmapFontInstallOptions): BitmapFont;\n    /** @deprecated since 7.0.0 */\n    public install(name: string, style?: TextStyle | TextStyleOptions, options?: BitmapFontInstallOptions): BitmapFont;\n    // eslint-disable-next-line max-len\n    public install(...args: [string | BitmapFontInstallOptions, (TextStyle | TextStyleOptions)?, BitmapFontInstallOptions?]): BitmapFont\n    {\n        let options = args[0] as BitmapFontInstallOptions;\n\n        if (typeof options === 'string')\n        {\n            options = {\n                name: options,\n                style: args[1],\n                chars: args[2]?.chars,\n                resolution: args[2]?.resolution,\n                padding: args[2]?.padding,\n                skipKerning: args[2]?.skipKerning,\n            } as BitmapFontInstallOptions;\n\n            // #if _DEBUG\n            // eslint-disable-next-line max-len\n            deprecation(v8_0_0, 'BitmapFontManager.install(name, style, options) is deprecated, use BitmapFontManager.install({name, style, ...options})');\n            // #endif\n        }\n\n        const name = options?.name;\n\n        if (!name)\n        {\n            throw new Error('[BitmapFontManager] Property `name` is required.');\n        }\n\n        options = { ...this.defaultOptions, ...options };\n\n        const textStyle = options.style;\n\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const overrideFill = options.dynamicFill ?? this._canUseTintForStyle(style);\n        const font = new DynamicBitmapFont({\n            style,\n            overrideFill,\n            skipKerning: options.skipKerning,\n            padding: options.padding,\n            resolution: options.resolution,\n            overrideSize: false,\n            textureStyle: options.textureStyle,\n        });\n\n        const flatChars = resolveCharacters(options.chars);\n\n        font.ensureCharacters(flatChars.join(''));\n\n        Cache.set(`${name}-bitmap`, font);\n\n        font.once('destroy', () => Cache.remove(`${name}-bitmap`));\n\n        return font;\n    }\n\n    /**\n     * Uninstalls a bitmap font from the cache.\n     * @param {string} name - The name of the bitmap font to uninstall.\n     */\n    public uninstall(name: string)\n    {\n        const cacheKey = `${name}-bitmap`;\n        const font = Cache.get<BitmapFont>(cacheKey);\n\n        if (font)\n        {\n            font.destroy();\n        }\n    }\n\n    /**\n     * Determines if a style can use tinting instead of baking colors into the bitmap.\n     * Tinting is more efficient as it allows reusing the same bitmap with different colors.\n     * @param style - The text style to evaluate\n     * @returns true if the style can use tinting, false if colors must be baked in\n     * @private\n     */\n    private _canUseTintForStyle(style: TextStyle): boolean\n    {\n        // Exclude strokes, non black shadows and ensure\n        // we have a non gradient or pattern fill,\n        // and the fill color is white\n        return !style._stroke\n            && (!style.dropShadow || style.dropShadow.color === 0x000000)\n            && !style._fill.fill\n            && style._fill.color === 0xFFFFFF;\n    }\n}\n\n/**\n * The BitmapFontManager is a helper that exists to install and uninstall fonts\n * into the cache for BitmapText objects.\n * @category text\n * @advanced\n * @class\n * @example\n * import { BitmapFontManager, BitmapText } from 'pixi.js';\n *\n * BitmapFontManager.install({\n *   name: 'TitleFont',\n *   style: {}\n * });\n *\n * const title = new BitmapText({ text: 'This is the title', style: { fontFamily: 'TitleFont' }});\n */\nexport const BitmapFontManager = new BitmapFontManagerClass();\n"],"names":[],"mappings":"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"}