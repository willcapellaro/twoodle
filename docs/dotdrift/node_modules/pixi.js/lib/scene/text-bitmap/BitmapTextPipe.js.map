{"version":3,"file":"BitmapTextPipe.js","sources":["../../../src/scene/text-bitmap/BitmapTextPipe.ts"],"sourcesContent":["import { Cache } from '../../assets/cache/Cache';\nimport { ExtensionType } from '../../extensions/Extensions';\nimport { Graphics } from '../graphics/shared/Graphics';\nimport { CanvasTextMetrics } from '../text/canvas/CanvasTextMetrics';\nimport { SdfShader } from '../text/sdfShader/SdfShader';\nimport { BitmapFontManager } from './BitmapFontManager';\nimport { getBitmapTextLayout } from './utils/getBitmapTextLayout';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../rendering/renderers/shared/Renderable';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { BitmapText } from './BitmapText';\n\n/** @internal */\nexport class BitmapTextGraphics extends Graphics\n{\n    public destroy()\n    {\n        if (this.context.customShader)\n        {\n            this.context.customShader.destroy();\n        }\n\n        super.destroy();\n    }\n}\n\n/** @internal */\nexport class BitmapTextPipe implements RenderPipe<BitmapText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'bitmapText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(bitmapText: BitmapText): boolean\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        return this._renderer.renderPipes.graphics.validateRenderable(graphicsRenderable);\n\n        // TODO - need to shift all the verts in the graphicsData to the new anchor\n\n        // update the anchor...\n    }\n\n    public addRenderable(bitmapText: BitmapText, instructionSet: InstructionSet)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        if (bitmapText._didTextUpdate)\n        {\n            bitmapText._didTextUpdate = false;\n\n            this._updateContext(bitmapText, graphicsRenderable);\n        }\n\n        this._renderer.renderPipes.graphics.addRenderable(graphicsRenderable, instructionSet);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    public updateRenderable(bitmapText: BitmapText)\n    {\n        const graphicsRenderable = this._getGpuBitmapText(bitmapText);\n\n        // sync..\n        syncWithProxy(bitmapText, graphicsRenderable);\n\n        this._renderer.renderPipes.graphics.updateRenderable(graphicsRenderable);\n\n        if (graphicsRenderable.context.customShader)\n        {\n            this._updateDistanceField(bitmapText);\n        }\n    }\n\n    private _updateContext(bitmapText: BitmapText, proxyGraphics: Graphics)\n    {\n        const { context } = proxyGraphics;\n\n        const bitmapFont = BitmapFontManager.getFont(bitmapText.text, bitmapText._style);\n\n        context.clear();\n\n        if (bitmapFont.distanceField.type !== 'none')\n        {\n            if (!context.customShader)\n            {\n                // TODO: Check if this is a WebGL renderer before asserting type\n                context.customShader = new SdfShader(this._renderer.limits.maxBatchableTextures);\n            }\n        }\n\n        const chars = CanvasTextMetrics.graphemeSegmenter(bitmapText.text);\n        const style = bitmapText._style;\n\n        let currentY = bitmapFont.baseLineOffset;\n\n        // measure our text...\n        const bitmapTextLayout = getBitmapTextLayout(chars, style, bitmapFont, true);\n\n        const padding = style.padding;\n        const scale = bitmapTextLayout.scale;\n\n        let tx = bitmapTextLayout.width;\n        let ty = bitmapTextLayout.height + bitmapTextLayout.offsetY;\n\n        if (style._stroke)\n        {\n            tx += style._stroke.width / scale;\n            ty += style._stroke.width / scale;\n        }\n\n        context\n            .translate((-bitmapText._anchor._x * tx) - padding, (-bitmapText._anchor._y * ty) - padding)\n            .scale(scale, scale);\n\n        const tint = bitmapFont.applyFillAsTint ? style._fill.color : 0xFFFFFF;\n\n        let fontSize = bitmapFont.fontMetrics.fontSize;\n        let lineHeight = bitmapFont.lineHeight;\n\n        if (style.lineHeight)\n        {\n            fontSize = style.fontSize / scale;\n            lineHeight = style.lineHeight / scale;\n        }\n\n        let linePositionYShift = (lineHeight - fontSize) / 2;\n\n        // if `currentY` is no longer starts from `baseLineOffset`\n        // the `baseLineOffset` below may also need to be removed\n        if (linePositionYShift - bitmapFont.baseLineOffset < 0)\n        {\n            linePositionYShift = 0;\n        }\n\n        for (let i = 0; i < bitmapTextLayout.lines.length; i++)\n        {\n            const line = bitmapTextLayout.lines[i];\n\n            for (let j = 0; j < line.charPositions.length; j++)\n            {\n                const char = line.chars[j];\n                const charData = bitmapFont.chars[char];\n\n                if (charData?.texture)\n                {\n                    const texture = charData.texture;\n\n                    context.texture(\n                        texture,\n                        tint ? tint : 'black',\n                        Math.round(line.charPositions[j] + charData.xOffset),\n                        Math.round(currentY + charData.yOffset + linePositionYShift),\n                        texture.orig.width,\n                        texture.orig.height,\n                    );\n                }\n            }\n\n            currentY += lineHeight;\n        }\n    }\n\n    private _getGpuBitmapText(bitmapText: BitmapText)\n    {\n        return bitmapText._gpuData[this._renderer.uid] || this.initGpuText(bitmapText);\n    }\n\n    public initGpuText(bitmapText: BitmapText)\n    {\n        // TODO we could keep a bunch of contexts around and reuse one that has the same style!\n        const proxyRenderable = new BitmapTextGraphics();\n\n        bitmapText._gpuData[this._renderer.uid] = proxyRenderable;\n\n        this._updateContext(bitmapText, proxyRenderable);\n\n        return proxyRenderable;\n    }\n\n    private _updateDistanceField(bitmapText: BitmapText)\n    {\n        const context = this._getGpuBitmapText(bitmapText).context;\n\n        const fontFamily = bitmapText._style.fontFamily as string;\n        const dynamicFont = Cache.get(`${fontFamily as string}-bitmap`);\n\n        // Inject the shader code with the correct value\n        const { a, b, c, d } = bitmapText.groupTransform;\n\n        const dx = Math.sqrt((a * a) + (b * b));\n        const dy = Math.sqrt((c * c) + (d * d));\n        const worldScale = (Math.abs(dx) + Math.abs(dy)) / 2;\n\n        const fontScale = dynamicFont.baseRenderedFontSize / bitmapText._style.fontSize;\n\n        const distance = worldScale * dynamicFont.distanceField.range * (1 / fontScale);\n\n        context.customShader.resources.localUniforms.uniforms.uDistance = distance;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n    }\n}\n\nfunction syncWithProxy(container: Renderable, proxy: Renderable)\n{\n    proxy.groupTransform = container.groupTransform;\n    proxy.groupColorAlpha = container.groupColorAlpha;\n    proxy.groupColor = container.groupColor;\n    proxy.groupBlendMode = container.groupBlendMode;\n    proxy.globalDisplayStatus = container.globalDisplayStatus;\n    proxy.groupTransform = container.groupTransform;\n    proxy.localDisplayStatus = container.localDisplayStatus;\n    proxy.groupAlpha = container.groupAlpha;\n    proxy._roundPixels = container._roundPixels;\n}\n"],"names":["Graphics","BitmapFontManager","SdfShader","CanvasTextMetrics","getBitmapTextLayout","Cache","ExtensionType"],"mappings":"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"}