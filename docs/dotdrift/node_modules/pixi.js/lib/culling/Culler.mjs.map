{"version":3,"file":"Culler.mjs","sources":["../../src/culling/Culler.ts"],"sourcesContent":["import { Bounds } from '../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../scene/container/bounds/getGlobalBounds';\n\nimport type { Container } from '../scene/container/Container';\n\nconst tempBounds = new Bounds();\n\n/**\n * A rectangle-like object that contains x, y, width, and height properties.\n * @example\n * const rect = { x: 0, y: 0, width: 100, height: 100 };\n * @category utils\n * @advanced\n */\nexport type RectangleLike = {x: number, y: number, width: number, height: number};\n\n/**\n * The Culler class is responsible for managing and culling containers.\n * Culling optimizes rendering performance by skipping objects outside the visible area.\n *\n * > [!IMPORTANT] culling is not always a golden bullet, it can be more expensive than rendering\n * > objects that are not visible, so it is best used in scenarios where you have many objects\n * > that are not visible at the same time, such as in large scenes or games with many sprites.\n * @example\n * ```ts\n * import { Culler, Container, Rectangle } from 'pixi.js';\n *\n * // Create a culler and container\n * const culler = new Culler();\n * const stage = new Container();\n *\n * // Set up container with culling\n * stage.cullable = true;\n * stage.cullArea = new Rectangle(0, 0, 800, 600);\n *\n * // Add some sprites that will be culled\n * for (let i = 0; i < 1000; i++) {\n *     const sprite = Sprite.from('texture.png');\n *     sprite.x = Math.random() * 2000;\n *     sprite.y = Math.random() * 2000;\n *     sprite.cullable = true;\n *     stage.addChild(sprite);\n * }\n *\n * // Cull objects outside view\n * culler.cull(stage, {\n *     x: 0,\n *     y: 0,\n *     width: 800,\n *     height: 600\n * });\n *\n * // Only visible objects will be rendered\n * renderer.render(stage);\n * ```\n * @see {@link CullerPlugin} For automatic culling in applications\n * @see {@link CullingMixinConstructor} For culling properties\n * @category scene\n * @standard\n */\nexport class Culler\n{\n    /**\n     * Culls the children of a specific container based on the given view rectangle.\n     * This determines which objects should be rendered and which can be skipped.\n     * @param container - The container to cull. Must be a Container instance.\n     * @param view - The view rectangle that defines the visible area\n     * @param skipUpdateTransform - Whether to skip updating transforms for better performance\n     * @example\n     * ```ts\n     * // Basic culling with view bounds\n     * const culler = new Culler();\n     * culler.cull(stage, {\n     *     x: 0,\n     *     y: 0,\n     *     width: 800,\n     *     height: 600\n     * });\n     *\n     * // Culling to renderer screen\n     * culler.cull(stage, renderer.screen, false);\n     * ```\n     * @remarks\n     * - Recursively processes all cullable children\n     * - Uses cullArea if defined, otherwise calculates bounds\n     * - Performance depends on scene complexity\n     * @see {@link CullingMixinConstructor.cullable} For enabling culling on objects\n     * @see {@link CullingMixinConstructor.cullArea} For custom culling boundaries\n     */\n    public cull(container: Container, view: RectangleLike, skipUpdateTransform = true)\n    {\n        this._cullRecursive(container, view, skipUpdateTransform);\n    }\n\n    private _cullRecursive(container: Container, view: RectangleLike, skipUpdateTransform = true)\n    {\n        if (container.cullable && container.measurable && container.includeInBuild)\n        {\n            const bounds = container.cullArea ?? getGlobalBounds(container, skipUpdateTransform, tempBounds);\n\n            // check view intersection..\n            container.culled = bounds.x >= view.x + view.width\n                || bounds.y >= view.y + view.height\n                || bounds.x + bounds.width <= view.x\n                || bounds.y + bounds.height <= view.y;\n        }\n        else\n        {\n            container.culled = false;\n        }\n\n        // dont process children if not needed\n        if (\n            !container.cullableChildren\n            || container.culled\n            || !container.renderable\n            || !container.measurable\n            || !container.includeInBuild\n        ) return;\n\n        for (let i = 0; i < container.children.length; i++)\n        {\n            this._cullRecursive(container.children[i], view, skipUpdateTransform);\n        }\n    }\n\n    /**\n     * A shared instance of the Culler class. Provides a global culler instance for convenience.\n     * @example\n     * ```ts\n     * // Use the shared instance instead of creating a new one\n     * Culler.shared.cull(stage, {\n     *     x: 0,\n     *     y: 0,\n     *     width: 800,\n     *     height: 600\n     * });\n     * ```\n     * @see {@link CullerPlugin} For automatic culling using this instance\n     */\n    public static shared = new Culler();\n}\n"],"names":[],"mappings":";;;;AAKA,MAAM,UAAA,GAAa,IAAI,MAAO,EAAA,CAAA;AAuDvB,MAAM,OAAA,GAAN,MAAM,OACb,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BW,IAAK,CAAA,SAAA,EAAsB,IAAqB,EAAA,mBAAA,GAAsB,IAC7E,EAAA;AACI,IAAK,IAAA,CAAA,cAAA,CAAe,SAAW,EAAA,IAAA,EAAM,mBAAmB,CAAA,CAAA;AAAA,GAC5D;AAAA,EAEQ,cAAe,CAAA,SAAA,EAAsB,IAAqB,EAAA,mBAAA,GAAsB,IACxF,EAAA;AACI,IAAA,IAAI,SAAU,CAAA,QAAA,IAAY,SAAU,CAAA,UAAA,IAAc,UAAU,cAC5D,EAAA;AACI,MAAA,MAAM,SAAS,SAAU,CAAA,QAAA,IAAY,eAAgB,CAAA,SAAA,EAAW,qBAAqB,UAAU,CAAA,CAAA;AAG/F,MAAU,SAAA,CAAA,MAAA,GAAS,OAAO,CAAK,IAAA,IAAA,CAAK,IAAI,IAAK,CAAA,KAAA,IACtC,MAAO,CAAA,CAAA,IAAK,IAAK,CAAA,CAAA,GAAI,KAAK,MAC1B,IAAA,MAAA,CAAO,CAAI,GAAA,MAAA,CAAO,KAAS,IAAA,IAAA,CAAK,KAChC,MAAO,CAAA,CAAA,GAAI,MAAO,CAAA,MAAA,IAAU,IAAK,CAAA,CAAA,CAAA;AAAA,KAG5C,MAAA;AACI,MAAA,SAAA,CAAU,MAAS,GAAA,KAAA,CAAA;AAAA,KACvB;AAGA,IAAA,IACI,CAAC,SAAA,CAAU,gBACR,IAAA,SAAA,CAAU,MACV,IAAA,CAAC,SAAU,CAAA,UAAA,IACX,CAAC,SAAA,CAAU,UACX,IAAA,CAAC,SAAU,CAAA,cAAA;AAChB,MAAA,OAAA;AAEF,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,SAAU,CAAA,QAAA,CAAS,QAAQ,CAC/C,EAAA,EAAA;AACI,MAAA,IAAA,CAAK,eAAe,SAAU,CAAA,QAAA,CAAS,CAAC,CAAA,EAAG,MAAM,mBAAmB,CAAA,CAAA;AAAA,KACxE;AAAA,GACJ;AAiBJ,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjFa,OAgFK,CAAA,MAAA,GAAS,IAAI,OAAO,EAAA,CAAA;AAhF/B,IAAM,MAAN,GAAA;;;;"}