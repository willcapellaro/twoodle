{"version":3,"file":"math-extras.min.js","sources":["../../src/math-extras/pointExtras.ts","../../src/math-extras/rectangleExtras.ts","../../src/math-extras/init.ts","../../src/math-extras/util.ts"],"sourcesContent":["import { Point } from '../maths/point/Point';\n\nimport type { PointData } from '../maths/point/PointData';\n\n/** @internal */\nexport const pointExtraMixins: any = {\n    add<T extends PointData>(other: PointData, outPoint?: T): T\n    {\n        if (!outPoint)\n        {\n            outPoint = new Point() as PointData as T;\n        }\n        outPoint.x = this.x + other.x;\n        outPoint.y = this.y + other.y;\n\n        return outPoint;\n    },\n    subtract<T extends PointData>(other: PointData, outPoint?: T): T\n    {\n        if (!outPoint)\n        {\n            outPoint = new Point() as PointData as T;\n        }\n        outPoint.x = this.x - other.x;\n        outPoint.y = this.y - other.y;\n\n        return outPoint;\n    },\n    multiply<T extends PointData>(other: PointData, outPoint?: T): T\n    {\n        if (!outPoint)\n        {\n            outPoint = new Point() as PointData as T;\n        }\n        outPoint.x = this.x * other.x;\n        outPoint.y = this.y * other.y;\n\n        return outPoint;\n    },\n    multiplyScalar<T extends PointData>(scalar: number, outPoint?: T): T\n    {\n        if (!outPoint)\n        {\n            outPoint = new Point() as PointData as T;\n        }\n        outPoint.x = this.x * scalar;\n        outPoint.y = this.y * scalar;\n\n        return outPoint;\n    },\n    dot(other: PointData): number\n    {\n        return (this.x * other.x) + (this.y * other.y);\n    },\n    cross(other: PointData): number\n    {\n        /*\n         * Returns the magnitude of the vector that would result\n         * from a regular 3D cross product of the input vectors,\n         * taking their Z values implicitly as 0\n         * (i.e. treating the 2D space as a plane in the 3D space).\n         * The 3D cross product will be perpendicular to that plane,\n         * and thus have 0 X & Y components\n         * (thus the scalar returned is the Z value of the 3D cross product vector).\n         */\n        return (this.x * other.y) - (this.y * other.x);\n    },\n    normalize<T extends PointData>(outPoint?: T): T\n    {\n        if (!outPoint)\n        {\n            outPoint = new Point() as PointData as T;\n        }\n        const magnitude = Math.sqrt((this.x * this.x) + (this.y * this.y));\n\n        outPoint.x = this.x / magnitude;\n        outPoint.y = this.y / magnitude;\n\n        return outPoint;\n    },\n    magnitude(): number\n    {\n        return Math.sqrt((this.x * this.x) + (this.y * this.y));\n    },\n    magnitudeSquared(): number\n    {\n        return (this.x * this.x) + (this.y * this.y);\n    },\n    project<T extends PointData>(onto: PointData, outPoint?: T): T\n    {\n        if (!outPoint)\n        {\n            outPoint = new Point() as PointData as T;\n        }\n        // Math says: a Projected over b = [(a·b) / (b·b)] * b;\n        const normalizedScalarProjection = ((this.x * onto.x) + (this.y * onto.y)) / ((onto.x * onto.x) + (onto.y * onto.y));\n\n        outPoint.x = onto.x * normalizedScalarProjection;\n        outPoint.y = onto.y * normalizedScalarProjection;\n\n        return outPoint;\n    },\n    reflect<T extends PointData>(normal: PointData, outPoint?: T): T\n    {\n        if (!outPoint)\n        {\n            outPoint = new Point() as PointData as T;\n        }\n\n        // Given an incident vector i and a normal vector n, returns the reflection vector r = i - 2 * dot(i, n) * n\n\n        const dotProduct = (this.x * normal.x) + (this.y * normal.y);\n\n        outPoint.x = this.x - (2 * dotProduct * normal.x);\n        outPoint.y = this.y - (2 * dotProduct * normal.y);\n\n        return outPoint;\n    },\n    rotate<T extends PointData>(radians: number, outPoint?: T): T\n    {\n        outPoint ??= new Point() as PointData as T;\n\n        const cosTheta = Math.cos(radians);\n        const sinTheta = Math.sin(radians);\n\n        outPoint.x = (this.x * cosTheta) - (this.y * sinTheta);\n        outPoint.y = (this.x * sinTheta) + (this.y * cosTheta);\n\n        return outPoint;\n    }\n};\n","import { Rectangle } from '../maths/shapes/Rectangle';\n\n/** @internal */\nexport const rectangleExtraMixins: Partial<Rectangle> = {\n    containsRect(other: Rectangle): boolean\n    {\n        if (other.width <= 0 || other.height <= 0)\n        {\n            return other.x > this.x && other.y > this.y && other.right < this.right && other.bottom < this.bottom;\n        }\n\n        return other.x >= this.x && other.y >= this.y && other.right <= this.right && other.bottom <= this.bottom;\n    },\n    equals(other: Rectangle): boolean\n    {\n        if (other === this)\n        {\n            return true;\n        }\n\n        return (\n            other\n            && this.x === other.x\n            && this.y === other.y\n            && this.width === other.width\n            && this.height === other.height\n        );\n    },\n    intersection<T extends Rectangle>(other: Rectangle, outRect?: T): T\n    {\n        if (!outRect)\n        {\n            outRect = new Rectangle() as T;\n        }\n\n        const x0 = this.x < other.x ? other.x : this.x;\n        const x1 = this.right > other.right ? other.right : this.right;\n\n        if (x1 <= x0)\n        {\n            outRect.x = outRect.y = outRect.width = outRect.height = 0;\n\n            return outRect;\n        }\n\n        const y0 = this.y < other.y ? other.y : this.y;\n        const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n        if (y1 <= y0)\n        {\n            outRect.x = outRect.y = outRect.width = outRect.height = 0;\n\n            return outRect;\n        }\n\n        outRect.x = x0;\n        outRect.y = y0;\n        outRect.width = x1 - x0;\n        outRect.height = y1 - y0;\n\n        return outRect;\n    },\n    union<T extends Rectangle>(other: Rectangle, outRect?: T): T\n    {\n        if (!outRect)\n        {\n            outRect = new Rectangle() as T;\n        }\n\n        const x1 = Math.min(this.x, other.x);\n        const x2 = Math.max(this.x + this.width, other.x + other.width);\n        const y1 = Math.min(this.y, other.y);\n        const y2 = Math.max(this.y + this.height, other.y + other.height);\n\n        outRect.x = x1;\n        outRect.y = y1;\n        outRect.width = x2 - x1;\n        outRect.height = y2 - y1;\n\n        return outRect;\n    },\n};\n","import { ObservablePoint } from '../maths/point/ObservablePoint';\nimport { Point } from '../maths/point/Point';\nimport { Rectangle } from '../maths/shapes/Rectangle';\nimport { pointExtraMixins } from './pointExtras';\nimport { rectangleExtraMixins } from './rectangleExtras';\n\nObject.assign(Point.prototype, pointExtraMixins);\nObject.assign(ObservablePoint.prototype, pointExtraMixins);\nObject.assign(Rectangle.prototype, rectangleExtraMixins);\n","import { Point } from '../maths/point/Point';\nimport './pointExtras';\nimport './rectangleExtras';\n\nimport type { PointData } from '../maths/point/PointData';\n\n/**\n * The idea of a relative epsilon comparison is to find the difference between the two numbers,\n * and see if it is less than a given epsilon.\n * A good epsilon would be the N% of the largest of the two values or `Math.EPSILON`.\n *\n * _Note: Only available with **pixi.js/math-extras**._\n * @param {number} a - First floating number to compare.\n * @param {number} b - Second floating number to compare.\n * @param {number} epsilon - The epsilon to compare to.\n * The larger the epsilon, the easier for the numbers to be considered equals.\n * @returns {boolean} Returns `true` if the difference between the values is less than the given epsilon;\n * otherwise `false`.\n * @category maths\n * @advanced\n */\nexport function floatEqual(a: number, b: number, epsilon: number = Number.EPSILON): boolean\n{\n    if (a === b)\n    {\n        return true;\n    }\n\n    const diff = Math.abs(a - b);\n\n    return diff < epsilon;\n}\n\n/**\n * Generic line or segment intersection.\n * A line can intersect outside the two points defining it, the segment can't.\n * @param aStart - First point of the first line.\n * @param aEnd - Second point of the first line.\n * @param bStart - First point of the second line.\n * @param bEnd - Second point of the second line.\n * @param isLine - Set to true if you want Line (unbounded) intersection.\n * @param {PointData} [outPoint] - A Point-like object in which to store the value,\n * optional (otherwise will create a new Point).\n * @returns {PointData} The point where the lines/segments intersect or a `NaN` Point.\n */\nfunction genericLineIntersection<T extends PointData>(\n    aStart: PointData,\n    aEnd: PointData,\n    bStart: PointData,\n    bEnd: PointData,\n    isLine: boolean,\n    outPoint?: T): T\n{\n    if (!outPoint)\n    {\n        outPoint = new Point() as PointData as T;\n    }\n\n    const dxa = aEnd.x - aStart.x;\n    const dya = aEnd.y - aStart.y;\n    const dxb = bEnd.x - bStart.x;\n    const dyb = bEnd.y - bStart.y;\n\n    // In order to find the position of the intersection in respect to the line segments, we can define lines\n    // in terms of first degree Bézier parameters, and find the two parameters `ua` and `ub` for the two lines to touch.\n    // both `ua` and `ub` formula share the same denominator so it is only calculated once.\n\n    const denominator = ((dyb * dxa) - (dxb * dya));\n\n    // If lines are parallel or overlapping, the intersection can be nowhere or everywhere... NaN.\n    if (floatEqual(denominator, 0))\n    {\n        outPoint.x = NaN;\n        outPoint.y = NaN;\n\n        return outPoint;\n    }\n\n    // ua is the factor of line a where the intersection occurs. ub is the factor of line b where the intersection occurs.\n    const ua = ((dxb * (aStart.y - bStart.y)) - (dyb * (aStart.x - bStart.x))) / denominator;\n    const ub = ((dxa * (aStart.y - bStart.y)) - (dya * (aStart.x - bStart.x))) / denominator;\n\n    // Line intersection extends beyond the bounds of the segment.\n    // The intersection is inside the segments if 0.0 ≤ ua ≤ 1.0 and 0.0 ≤ ub ≤ 1.0\n    if (!isLine && (ua < 0 || ua > 1 || ub < 0 || ub > 1))\n    {\n        outPoint.x = NaN;\n        outPoint.y = NaN;\n\n        return outPoint;\n    }\n\n    outPoint.x = aStart.x + (ua * dxa);\n    outPoint.y = bStart.y + (ub * dyb);\n\n    return outPoint;\n}\n\n/**\n * Computes the point where non-coincident and non-parallel Lines intersect.\n * Coincident or parallel lines return a `NaN` point `{x: NaN, y: NaN}`.\n * The intersection point may land outside the extents of the lines.\n *\n * _Note: Only available with **pixi.js/math-extras**._\n * @param aStart - First point of the first line.\n * @param aEnd - Second point of the first line.\n * @param bStart - First point of the second line.\n * @param bEnd - Second point of the second line.\n * @param {PointData} outPoint - A Point-like object in which to store the value,\n * optional (otherwise will create a new Point).\n * @returns {PointData} The point where the lines intersect or a `NaN` Point.\n * @category maths\n * @advanced\n */\nexport function lineIntersection\n<T extends PointData = Point>(aStart: PointData, aEnd: PointData, bStart: PointData, bEnd: PointData, outPoint?: T): T\n{\n    return genericLineIntersection(aStart, aEnd, bStart, bEnd, true, outPoint);\n}\n\n/**\n * Computes the point where non-coincident and non-parallel segments intersect.\n * Coincident, parallel or non-intersecting segments return a `NaN` point `{x: NaN, y: NaN}`.\n * The intersection point must land inside the extents of the segments or return a `NaN` Point.\n *\n * _Note: Only available with **pixi.js/math-extras**._\n * @param aStart - Starting point of the first segment.\n * @param aEnd - Ending point of the first segment.\n * @param bStart - Starting point of the second segment.\n * @param bEnd - Ending point of the second segment.\n * @param {PointData} outPoint - A Point-like object in which to store the value,\n * optional (otherwise will create a new Point).\n * @returns {PointData} The point where the segments intersect or a `NaN` Point.\n * @category maths\n * @advanced\n */\nexport function segmentIntersection\n<T extends PointData = Point>(aStart: PointData, aEnd: PointData, bStart: PointData, bEnd: PointData, outPoint?: T): T\n{\n    return genericLineIntersection(aStart, aEnd, bStart, bEnd, false, outPoint);\n}\n"],"names":["Point","rectangleExtraMixins","i","s","Rectangle","n","t","h","x","ObservablePoint"],"mappings":";;;;;;uEAAA,aAU2BA,MAAAA,EAAAA,CAAAA,IAAAA,EAAAA,EAAAA,CAAAA,OAAAA,IAAAA,EAAAA,IAAAA,KAAAA,OAWAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,SAAAA,EAAAA,EAAAA,CAAAA,OAAAA,IAAAA,EAAAA,IAAAA,KAAAA,uEAWAA,kFAWAA,KAAAA,OAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA,OAAAA,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,CAAAA,EAAAA,MAAAA,EAAAA,CAAAA,OAAAA,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,CAAAA,EAAAA,UAAAA,EAAAA,CAAAA,IAAAA,EAAAA,IA4BAA,YAqBAA,MAAAA,EAAAA,KAAAA,KAAAA,KAAAA,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,KAAAA,CAAAA,EAAAA,OAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,CAAAA,EAAAA,WAAAA,CAAAA,OAAAA,KAAAA,KAAAA,KAAAA,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAAA,kBAAAA,CAAAA,OAAAA,KAAAA,EAAAA,KAAAA,EAAAA,KAAAA,EAAAA,KAAAA,CAAAA,EAAAA,QAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,IAAAA,KAAAA,OAcAA,MAAAA,GAAAA,KAAAA,EAAAA,EAAAA,EAAAA,KAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,CAAAA,EAAAA,QAAAA,EAAAA,EAAAA,CAAAA,IAAAA,EAAAA,IAAAA,KAAAA,iHAcFA,qGCrHlBC,EAAA,CAAA,aAAAC,EAAA,CAAA,OAAAA,EAAA,OAAA,GAAAA,EAAA,QAAA,EAAAA,EAAA,EAAA,KAAA,GAAAA,EAAA,EAAA,KAAA,GAAAA,EAAA,MAAA,KAAA,OAAAA,EAAA,OAAA,KAAA,OAAAA,EAAA,GAAA,KAAA,GAAAA,EAAA,GAAA,KAAA,GAAAA,EAAA,OAAA,KAAA,OAAAA,EAAA,QAAA,KAAA,MAAA,EAAA,OAAAA,EAAA,CAAA,OAAAA,IAAA,KAAA,GAAAA,GAAA,KAAA,IAAAA,EAAA,GAAA,KAAA,IAAAA,EAAA,GAAA,KAAA,QAAAA,EAAA,OAAA,KAAA,SAAAA,EAAA,MAAA,EAAA,aAAAA,EAAAC,EAAA,CAAAA,IAAAA,EAAA,IA6BmBC,KAGlB,WAAA,MAAAC,EAAA,KAAA,EAAAH,EAAA,EAAAA,EAAA,EAAA,KAAA,EAAAI,EAAA,KAAA,MAAAJ,EAAA,MAAAA,EAAA,MAAA,KAAA,MAAA,GAAAI,GAAAD,EAAA,OAAAF,EAAA,EAAAA,EAAA,EAAAA,EAAA,MAAAA,EAAA,OAAA,EAAAA,EAAA,MAAAI,EAAA,KAAA,EAAAL,EAAA,EAAAA,EAAA,EAAA,KAAA,EAAAM,EAAA,KAAA,OAAAN,EAAA,OAAAA,EAAA,OAAA,KAAA,OAAA,OAAAM,GAAAD,GAAAJ,EAAA,EAAAA,EAAA,EAAAA,EAAA,MAAAA,EAAA,OAAA,EAAAA,IAAAA,EAAA,EAAAE,EAAAF,EAAA,EAAAI,EAAAJ,EAAA,MAAAG,EAAAD,EAAAF,EAAA,OAAAK,EAAAD,EAAAJ,EAAA,EAAA,MAAAD,EAAAC,EAAA,CAAAA,IAAAA,EAAA,IA+BkBC,KAGlB,WAAA,MAAAC,EAAA,KAAA,IAAA,KAAA,EAAAH,EAAA,CAAA,EAAAI,EAAA,KAAA,IAAA,KAAA,EAAA,KAAA,MAAAJ,EAAA,EAAAA,EAAA,KAAA,EAAAK,EAAA,KAAA,IAAA,KAAA,EAAAL,EAAA,CAAA,EAAAM,EAAA,KAAA,IAAA,KAAA,EAAA,KAAA,OAAAN,EAAA,EAAAA,EAAA,MAAA,EAAA,OAAAC,EAAA,EAAAE,EAAAF,EAAA,EAAAI,EAAAJ,EAAA,MAAAG,EAAAD,EAAAF,EAAA,OAAAK,EAAAD,EAAAJ,CAAA,CAAA,EC/DMH,OAAAA,OAAAA,KAAAA,MACAS,UAAAA,CAAAA,EAAAA,OAAAA,OAAAA,KAAAA,2CACAL,KAAAA,UAAAA,UAAAA,CAAAA,qGC+CSJ"}